@model List<ExpenseTracker.Models.Transaction>
@{
    ViewData["Title"] = "Giao dịch";
}

<div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">Giao dịch</h1>
            <p class="text-gray-600 mt-1">Quản lý tất cả giao dịch thu chi của bạn</p>
        </div>
        <a href="@Url.Action("Add", "Transaction")" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors">
            <i class="fas fa-plus mr-2"></i>Thêm giao dịch
        </a>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Loại giao dịch</label>
                <select id="typeFilter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">Tất cả</option>
                    <option value="income">Thu nhập</option>
                    <option value="expense">Chi tiêu</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Từ ngày</label>
                <input type="date" id="fromDate" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Đến ngày</label>
                <input type="date" id="toDate" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Tìm kiếm</label>
                <input type="text" id="searchInput" placeholder="Tìm theo mô tả..." class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            </div>
        </div>
    </div>

    <!-- Transactions List -->
    <div class="bg-white rounded-2xl shadow-lg border border-gray-100">
        <div class="p-6 border-b border-gray-200">
            <h3 class="text-xl font-bold text-gray-900">Danh sách giao dịch</h3>
        </div>
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Giao dịch</th>
                        <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Danh mục</th>
                        <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ngày</th>
                        <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Số tiền</th>
                        <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Loại</th>
                    </tr>
                </thead>
                <tbody id="transactionTableBody" class="bg-white divide-y divide-gray-200">
                    @foreach (var transaction in Model)
                    {
                        <tr class="hover:bg-gray-50 transition-colors">
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="flex items-center">
                                    <div class="w-10 h-10 rounded-full flex items-center justify-center text-lg mr-4" style="background-color: @(transaction.Category?.Color)20;">
                                        @transaction.Category?.Icon
                                    </div>
                                    <div>
                                        <div class="text-sm font-medium text-gray-900">@transaction.Description</div>
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium" style="background-color: @(transaction.Category?.Color)20; color: @transaction.Category?.Color;">
                                    @transaction.Category?.Name
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @transaction.Date.ToString("dd/MM/yyyy")
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium @(transaction.Type == "income" ? "text-green-600" : "text-red-600")">
                                @(transaction.Type == "income" ? "+" : "-")@transaction.Amount.ToString("N0") VND
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @(transaction.Type == "income" ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                    @(transaction.Type == "income" ? "Thu nhập" : "Chi tiêu")
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
<script>
    // Filter functionality
    const typeFilter = document.getElementById('typeFilter');
    const fromDate = document.getElementById('fromDate');
    const toDate = document.getElementById('toDate');
    const searchInput = document.getElementById('searchInput');
    
    function filterTransactions() {
        fetch('@Url.Action("GetTransactionData", "Transaction")')
            .then(response => response.json())
            .then(data => {
                let filteredData = data;
                
                // Filter by type
                if (typeFilter.value) {
                    filteredData = filteredData.filter(t => t.type === typeFilter.value);
                }
                
                // Filter by date range
                if (fromDate.value) {
                    const from = new Date(fromDate.value);
                    filteredData = filteredData.filter(t => new Date(t.date.split('/').reverse().join('-')) >= from);
                }
                
                if (toDate.value) {
                    const to = new Date(toDate.value);
                    filteredData = filteredData.filter(t => new Date(t.date.split('/').reverse().join('-')) <= to);
                }
                
                // Filter by search
                if (searchInput.value) {
                    const search = searchInput.value.toLowerCase();
                    filteredData = filteredData.filter(t => 
                        t.description.toLowerCase().includes(search) ||
                        t.category.toLowerCase().includes(search)
                    );
                }
                
                // Update table
                updateTable(filteredData);
            });
    }
    
    function updateTable(data) {
        const tbody = document.getElementById('transactionTableBody');
        tbody.innerHTML = data.map(transaction => `
            <tr class="hover:bg-gray-50 transition-colors">
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                        <div class="w-10 h-10 rounded-full flex items-center justify-center text-lg mr-4" style="background-color: ${transaction.categoryColor}20;">
                            ${transaction.categoryIcon}
                        </div>
                        <div>
                            <div class="text-sm font-medium text-gray-900">${transaction.description}</div>
                        </div>
                    </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium" style="background-color: ${transaction.categoryColor}20; color: ${transaction.categoryColor};">
                        ${transaction.category}
                    </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${transaction.date}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium ${transaction.type === 'income' ? 'text-green-600' : 'text-red-600'}">
                    ${transaction.type === 'income' ? '+' : '-'}${transaction.amount.toLocaleString('vi-VN')} VND
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${transaction.type === 'income' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                        ${transaction.type === 'income' ? 'Thu nhập' : 'Chi tiêu'}
                    </span>
                </td>
            </tr>
        `).join('');
    }
    
    // Add event listeners
    typeFilter.addEventListener('change', filterTransactions);
    fromDate.addEventListener('change', filterTransactions);
    toDate.addEventListener('change', filterTransactions);
    searchInput.addEventListener('input', filterTransactions);
</script>
}